[{"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\index.js":"1","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\reportWebVitals.js":"2","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\App.js":"3","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Button.js":"4","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Form.js":"5","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Preview.js":"6","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Label.js":"7","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Input.js":"8"},{"size":503,"mtime":1606947002080,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":10973,"mtime":1607294968682,"results":"12","hashOfConfig":"10"},{"size":240,"mtime":1607290999809,"results":"13","hashOfConfig":"10"},{"size":2450,"mtime":1607197501753,"results":"14","hashOfConfig":"10"},{"size":621,"mtime":1607197391008,"results":"15","hashOfConfig":"10"},{"size":148,"mtime":1607257153347,"results":"16","hashOfConfig":"10"},{"size":254,"mtime":1607259101507,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"wyz533",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\index.js",[],["38","39"],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\reportWebVitals.js",[],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\App.js",["40","41","42"],"import React, { useState } from 'react'\nimport Button from './components/Button'\nimport Label from './components/Label'\nimport Input from './components/Input'\nimport { SliderPicker } from 'react-color'\n\nfunction App() {\n    let [widthValue, setWidthValue] = useState(500)\n    let [heightValue, setHeightValue] = useState(500)\n    let [radiusValue, setRadiusValue] = useState(20)\n    let [colorValue, setColorValue] = useState('#e1cfe9')\n    let [backgroundValue, setBackgroundValue] = useState('https://purepng.com/public/uploads/large/red-edition-audi-luxury-car-jdc.png')\n    let [textValue, setTextValue] = useState('Продают собственники')\n    let [sizeTextValue, setSizeTextValue] = useState(60)\n    let [colorTextValue, setColorTextValue] = useState('#000000')\n    let [htmlBtn, setHtmlBtn] = useState('block')\n    let [cssBtn, setCssBtn] = useState('none')\n    let [jsonBtn, setJsonBtn] = useState('none')\n\n    function changeWidthValue(event) {\n        if (event.target.value <= 500) {\n            setWidthValue(event.target.value)\n        }\n    }\n\n    function changeHeightValue(event) {\n        if (event.target.value <= 500) {\n            setHeightValue(event.target.value)\n        }\n    }\n\n    function changeRadiusValue(event) {\n        if (event.target.value <= 250) {\n            setRadiusValue(event.target.value)\n        }\n    }\n\n    function changeColorValue(event) {\n        setColorValue(event.target.value)\n    }\n\n    function changeBackgroundValue(event) {\n        setBackgroundValue(event.target.value)\n    }\n\n    function changeTextValue(event) {\n        setTextValue(event.target.value)\n    }\n\n    function changeSizeTextValue(event) {\n        if (event.target.value <= 80) {\n            setSizeTextValue(event.target.value)\n        }\n    }\n\n    function changeColorTextValue(event) {\n        setColorTextValue(event.target.value)\n    }\n\n    const [color, setColor] = useState('#fff')\n\n    function updateColor(updateColor) {\n        setColorValue(updateColor.hex)\n    }\n\n    function updateColorText(updateColor) {\n        setColorTextValue(updateColor.hex)\n    }\n\n    let bannerStyle = {\n        width: `${widthValue}px`,\n        height: `${heightValue}px`,\n        borderRadius: `${radiusValue}px`,\n        backgroundColor: `${colorValue}`,\n        backgroundImage: `url(${backgroundValue})`,\n    }\n\n    let textStyle = {\n        fontSize: `${sizeTextValue}px`,\n        color: `${colorTextValue}`,\n    }\n\n    let styleHtml = {\n        display: `${htmlBtn}`,\n    }\n\n    let onClickHTML = () => {\n        setHtmlBtn('block')\n        setCssBtn('none')\n        setJsonBtn('none')\n    }\n\n    let styleCss = {\n        display: `${cssBtn}`,\n    }\n\n    let onClickCSS = () => {\n        setHtmlBtn('none')\n        setCssBtn('block')\n        setJsonBtn('none')\n    }\n\n    let styleJson = {\n        display: `${jsonBtn}`,\n    }\n\n    let onClickJSON = () => {\n        setHtmlBtn('none')\n        setCssBtn('none')\n        setJsonBtn('block')\n    }\n\n    // const [showPicker, setShowPicker] = useState(false)\n\n    return (\n        <div className='App'>\n            <div className='wrapper'>\n                <div className='app'>\n                    <form action='/' className='form'>\n                        <div className='form__group'>\n                            <Label text='Ширина' />\n                            <Input onChange={changeWidthValue} value={widthValue} type='text' placeholder='500' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Высота' />\n                            <Input onChange={changeHeightValue} value={heightValue} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Радиус' />\n                            <Input onChange={changeRadiusValue} value={radiusValue} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Цвет заливки' />\n                            <div>\n                                <Input onChange={changeColorValue} value={colorValue} type='text' />\n                                <SliderPicker color={colorValue} onChange={updateColor} />\n                            </div>\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Картинка (URL)' />\n                            <Input onChange={changeBackgroundValue} value={backgroundValue} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Текст (35 символов)' />\n                            <Input onChange={changeTextValue} value={textValue} type='text' maxLength='35' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Размер текста' />\n                            <Input onChange={changeSizeTextValue} value={sizeTextValue} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Цвет текста' />\n                            <div>\n                                <Input onChange={changeColorTextValue} value={colorTextValue} type='text' />\n                                <SliderPicker color={colorTextValue} onChange={updateColorText} />\n                            </div>\n                        </div>\n\n                        <Button text='Сохранить PNG' type='button' className='btn btn_create' />\n                    </form>\n                    <div className='preview'>\n                        <a href='https://avito.ru' target='_blank'>\n                            <div className='banner' style={bannerStyle}>\n                                <span className='text' style={textStyle}>\n                                    {textValue}\n                                </span>\n                            </div>\n                        </a>\n                        <div className='code_blocks'>\n                            <div className='code_html' style={styleHtml}>\n                                <pre className='code_block'>\n                                    <code>\n                                        &lt;div className='banner'&gt;\n                                        <br />\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;span className='text'&gt;{textValue}&lt;/span&gt;\n                                        <br />\n                                        &lt;/div&gt;\n                                    </code>\n                                </pre>\n                            </div>\n                            <div className='code_css' style={styleCss}>\n                                <pre className='code_block'>\n                                    <code>\n                                        .banner &#123;\n                                        <br />\n                                        width: {widthValue}px;\n                                        <br />\n                                        height: {heightValue}px;\n                                        <br />\n                                        border-radius: {radiusValue}px;\n                                        <br />\n                                        background-color: {colorValue};\n                                        <br />\n                                        background-image: url({backgroundValue});\n                                        <br />\n                                        background-position: center;\n                                        <br />\n                                        background-repeat: no-repeat;\n                                        <br />\n                                        &#125;\n                                        <br />\n                                        <br />\n                                        .text &#123;\n                                        <br />\n                                        position: absolute;\n                                        <br />\n                                        width: inherit;\n                                        <br />\n                                        overflow: hidden;\n                                        <br />\n                                        font-size: {sizeTextValue}px;\n                                        <br />\n                                        color: {colorTextValue};\n                                        <br />\n                                        text-align: right;\n                                        <br />\n                                        padding: 5px;\n                                        <br />\n                                        word-wrap: break-word;\n                                        <br />\n                                        line-height: 1;\n                                        <br />\n                                        left: 0;\n                                        <br />\n                                        bottom: 0;\n                                        <br />\n                                        &#125;\n                                    </code>\n                                </pre>\n                            </div>\n                            <div className='code_json' style={styleJson}>\n                                <pre className='code_block'>\n                                    <code>\n                                        &#123;'banner:' &#123;width: {widthValue}, height: {heightValue}, borderRadius: {radiusValue}, backgroundColor: {colorValue},\n                                        backgroundImage: url(\n                                        {backgroundValue}, background-position: center, background-repeat: no-repeat&#125; 'text:' &#123;position: absolute, width: inherit,\n                                        overflow: hidden, font-size: {sizeTextValue}, color: {colorTextValue}, text-align: right, padding: 5px, word-wrap: break-word, line-height:\n                                        1, left: 0, bottom: 0,&#125;\n                                    </code>\n                                </pre>\n                            </div>\n                        </div>\n                        <div className='btn_actions'>\n                            <Button text='HTML' type='button' onClick={onClickHTML} className='btn' />\n                            <Button text='CSS' type='button' onClick={onClickCSS} className='btn' />\n                            <Button text='JSON' type='button' onClick={onClickJSON} className='btn' />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Button.js",[],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Form.js",[],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Preview.js",[],["43","44"],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Label.js",[],["45","46"],"D:\\Frontend-разработка\\Banner-React-App\\react-avito-banner\\src\\components\\Input.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":60,"column":12,"nodeType":"53","messageId":"54","endLine":60,"endColumn":17},{"ruleId":"51","severity":1,"message":"55","line":60,"column":19,"nodeType":"53","messageId":"54","endLine":60,"endColumn":27},{"ruleId":"56","severity":1,"message":"57","line":162,"column":52,"nodeType":"58","endLine":162,"endColumn":67},{"ruleId":"47","replacedBy":"59"},{"ruleId":"49","replacedBy":"60"},{"ruleId":"47","replacedBy":"61"},{"ruleId":"49","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'color' is assigned a value but never used.","Identifier","unusedVar","'setColor' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["63"],["64"],["63"],["64"],"no-global-assign","no-unsafe-negation"]