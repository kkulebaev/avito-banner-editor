{"version":3,"sources":["components/Button.js","components/Label.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","type","onClick","text","Label","Input","onChange","value","placeholder","maxLength","App","useState","banner","width","height","borderRadius","backgroundColor","backgroundImage","position","bannerText","fontSize","color","textAlign","overflow","padding","left","bottom","state","setState","showHtml","showCss","showJson","showCode","setShowCode","onClickTextAlign","event","prev","target","bannerStyle","textStyle","action","updateColor","hex","name","printContents","document","getElementById","html2canvas","then","canvas","a","win","window","open","write","toDataURL","print","href","rel","style","id","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.87760db0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button className={props.className} type={props.type} onClick={props.onClick}>\r\n            {props.text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\n\r\nconst Label = (props) => {\r\n    return <label className='form__label'>{props.text}</label>\r\n}\r\n\r\nexport default Label\r\n","import React from 'react'\r\n\r\nconst Input = (props) => {\r\n    return <input onChange={props.onChange} className='form__input' type={props.type} value={props.value} placeholder={props.placeholder} maxLength={props.maxLength} />\r\n}\r\n\r\nexport default Input\r\n","import React, { useState } from 'react'\nimport Button from './components/Button'\nimport Label from './components/Label'\nimport Input from './components/Input'\nimport { SliderPicker } from 'react-color'\nimport html2canvas from 'html2canvas'\n\nfunction App() {\n    let [state, setState] = useState({\n        banner: {\n            width: 500,\n            height: 500,\n            borderRadius: 20,\n            backgroundColor: '#e1cfe9',\n            backgroundImage: 'https://purepng.com/public/uploads/large/red-edition-audi-luxury-car-jdc.png',\n            'background-position': 'center',\n            'background-repeat': 'no-repeat',\n            'background-size': '100%',\n            position: 'relative',\n        },\n        bannerText: {\n            text: 'Продают собственники',\n            fontSize: 75,\n            color: '#191c4d',\n            textAlign: 'right',\n            position: 'absolute',\n            width: 'inherit',\n            overflow: 'hidden',\n            padding: '5px',\n            'word-wrap': 'break-word',\n            'line-height': 1,\n            left: 0,\n            bottom: 0,\n        },\n    })\n\n    let [showCode, setShowCode] = useState({\n        showHtml: true,\n        showCss: false,\n        showJson: false,\n    })\n\n    function changeWidthValue(event) {\n        if (event.target.value <= 500) {\n            setState((prev) => {\n                return {\n                    ...prev,\n                    banner: { ...prev.banner, width: event.target.value },\n                }\n            })\n        }\n    }\n\n    function changeHeightValue(event) {\n        if (event.target.value <= 500) {\n            setState((prev) => {\n                return {\n                    ...prev,\n                    banner: { ...prev.banner, height: event.target.value },\n                }\n            })\n        }\n    }\n\n    function changeRadiusValue(event) {\n        if (event.target.value <= 250) {\n            setState((prev) => {\n                return {\n                    ...prev,\n                    banner: { ...prev.banner, borderRadius: event.target.value },\n                }\n            })\n        }\n    }\n\n    function changeColorValue(event) {\n        setState((prev) => {\n            return {\n                ...prev,\n                banner: { ...prev.banner, backgroundColor: event.target.value },\n            }\n        })\n    }\n\n    function updateColor(updateColor) {\n        setState((prev) => {\n            return {\n                ...prev,\n                banner: { ...prev.banner, backgroundColor: updateColor.hex },\n            }\n        })\n    }\n\n    function changeBackgroundValue(event) {\n        setState((prev) => {\n            return {\n                ...prev,\n                banner: { ...prev.banner, backgroundImage: event.target.value },\n            }\n        })\n    }\n\n    function changeTextValue(event) {\n        setState((prev) => {\n            return {\n                ...prev,\n                bannerText: { ...prev.bannerText, text: event.target.value },\n            }\n        })\n    }\n\n    function changeSizeTextValue(event) {\n        if (event.target.value <= 80) {\n            setState((prev) => {\n                return {\n                    ...prev,\n                    bannerText: { ...prev.bannerText, fontSize: event.target.value },\n                }\n            })\n        }\n    }\n\n    function changeColorTextValue(event) {\n        setState((prev) => {\n            return {\n                ...prev,\n                bannerText: { ...prev.bannerText, color: event.target.value },\n            }\n        })\n    }\n\n    function updateColorText(updateColor) {\n        setState((prev) => {\n            return {\n                ...prev,\n                bannerText: { ...prev.bannerText, color: updateColor.hex },\n            }\n        })\n    }\n\n    let onClickTextAlign = (event) => {\n        setState((prev) => {\n            return {\n                ...prev,\n                bannerText: { ...prev.bannerText, textAlign: event.target.value },\n            }\n        })\n    }\n\n    let bannerStyle = {\n        width: `${state.banner.width}px`,\n        height: `${state.banner.height}px`,\n        borderRadius: `${state.banner.borderRadius}px`,\n        backgroundColor: `${state.banner.backgroundColor}`,\n        backgroundImage: `url(${state.banner.backgroundImage})`,\n    }\n\n    let textStyle = {\n        fontSize: `${state.bannerText.fontSize}px`,\n        color: `${state.bannerText.color}`,\n        textAlign: `${state.bannerText.textAlign}`,\n    }\n\n    let onClickHTML = () => {\n        setShowCode((prev) => {\n            return {\n                ...prev,\n                showHtml: true,\n                showCss: false,\n                showJson: false,\n            }\n        })\n    }\n\n    let onClickCSS = () => {\n        setShowCode((prev) => {\n            return {\n                ...prev,\n                showHtml: false,\n                showCss: true,\n                showJson: false,\n            }\n        })\n    }\n\n    let onClickJSON = () => {\n        setShowCode((prev) => {\n            return {\n                ...prev,\n                showHtml: false,\n                showCss: false,\n                showJson: true,\n            }\n        })\n    }\n\n    let newWin = () => {\n        let printContents = document.getElementById('banner')\n        html2canvas(printContents).then(async function (canvas) {\n            let win = window.open()\n            await win.document.write(\"<br><img src='\" + canvas.toDataURL() + \"'/>\")\n            win.print()\n        })\n    }\n\n    return (\n        <div className='App'>\n            <div className='wrapper'>\n                <div className='app'>\n                    <form action='/' className='form'>\n                        <div className='form__group'>\n                            <Label text='Ширина' />\n                            <Input onChange={changeWidthValue} value={state.banner.width} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Высота' />\n                            <Input onChange={changeHeightValue} value={state.banner.height} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Радиус' />\n                            <Input onChange={changeRadiusValue} value={state.banner.borderRadius} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Цвет фона' />\n                            <div>\n                                <Input onChange={changeColorValue} value={state.banner.backgroundColor} type='text' />\n                                <SliderPicker color={state.banner.backgroundColor} onChange={updateColor} />\n                            </div>\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Картинка (URL)' />\n                            <Input onChange={changeBackgroundValue} value={state.banner.backgroundImage} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Текст (35 символов)' />\n                            <Input onChange={changeTextValue} value={state.bannerText.text} type='text' maxLength='35' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Размер текста' />\n                            <Input onChange={changeSizeTextValue} value={state.bannerText.fontSize} type='text' />\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Выравнивание' />\n                            <div>\n                                <input className='radio__label radio__label_left' onChange={onClickTextAlign} type='radio' name='textAlign' value='left' />\n                                <input className='radio__label radio__label_center' onChange={onClickTextAlign} type='radio' name='textAlign' value='center' />\n                                <input className='radio__label radio__label_right' onChange={onClickTextAlign} type='radio' name='textAlign' value='right' />\n                            </div>\n                        </div>\n                        <div className='form__group'>\n                            <Label text='Цвет текста' />\n                            <div>\n                                <Input onChange={changeColorTextValue} value={state.bannerText.color} type='text' />\n                                <SliderPicker color={state.bannerText.color} onChange={updateColorText} />\n                            </div>\n                        </div>\n\n                        <Button text='Сохранить PNG' type='button' className='btn btn_create' onClick={newWin} />\n                    </form>\n                    <div className='preview'>\n                        <a href='https://avito.ru' target='_blank' rel='noreferrer'>\n                            <div className='banner' style={bannerStyle} id='banner'>\n                                <span className='banner__text' style={textStyle}>\n                                    {state.bannerText.text}\n                                </span>\n                            </div>\n                        </a>\n                        <div className='code_blocks'>\n                            {showCode.showHtml ? (\n                                <div className='code_html'>\n                                    <pre className='code_block'>\n                                        <code>\n                                            &lt;div className='banner'&gt;\n                                            <br />\n                                            &nbsp;&nbsp;&nbsp;&nbsp;&lt;span className='text'&gt;{state.bannerText.text}&lt;/span&gt;\n                                            <br />\n                                            &lt;/div&gt;\n                                        </code>\n                                    </pre>\n                                </div>\n                            ) : null}\n                            {showCode.showCss ? (\n                                <div className='code_css'>\n                                    <pre className='code_block'>\n                                        <code>\n                                            .banner &#123;\n                                            <br />\n                                            width: {state.banner.width}px;\n                                            <br />\n                                            height: {state.banner.height}px;\n                                            <br />\n                                            border-radius: {state.banner.borderRadius}px;\n                                            <br />\n                                            background-color: {state.banner.backgroundColor};\n                                            <br />\n                                            background-image: url({state.banner.backgroundImage});\n                                            <br />\n                                            background-position: center;\n                                            <br />\n                                            background-repeat: no-repeat;\n                                            <br />\n                                            &#125;\n                                            <br />\n                                            <br />\n                                            .text &#123;\n                                            <br />\n                                            position: absolute;\n                                            <br />\n                                            width: inherit;\n                                            <br />\n                                            overflow: hidden;\n                                            <br />\n                                            font-size: {state.bannerText.fontSize}px;\n                                            <br />\n                                            color: {state.bannerText.color};\n                                            <br />\n                                            text-align: {state.bannerText.textAlign};\n                                            <br />\n                                            padding: 5px;\n                                            <br />\n                                            word-wrap: break-word;\n                                            <br />\n                                            line-height: 1;\n                                            <br />\n                                            left: 0;\n                                            <br />\n                                            bottom: 0;\n                                            <br />\n                                            &#125;\n                                        </code>\n                                    </pre>\n                                </div>\n                            ) : null}\n                            {showCode.showJson ? (\n                                <div className='code_json'>\n                                    <pre className='code_block'>\n                                        <code>{JSON.stringify(state, null, 2)}</code>\n                                    </pre>\n                                </div>\n                            ) : null}\n                        </div>\n                        <div className='btn_actions'>\n                            <Button text='HTML' type='button' onClick={onClickHTML} className='btn' />\n                            <Button text='CSS' type='button' onClick={onClickCSS} className='btn' />\n                            <Button text='JSON' type='button' onClick={onClickJSON} className='btn' />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}